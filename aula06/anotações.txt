COMO FORMATAR "STRINGS"

s.length = quantos caracters a string tem
s.toUperCase() = colocar para letras" MAIUSCULAS"
s.toLowerCase() = colocar para "minusculas"

para usar os TemplatesStrings, usa-se o acento grave `  (crase)

<script>	window.alert       // este comando emite uma mensagem!
window.confirm                  // este comando faz uma pergunta de confirmação
window.prompt                  // este comando faz um pergunta de resposta!')
</script>
________________________________________________________________________

Variáveis:

Como Criar variáveis, Ex: var nome ou let nome

para uma variável receber um valor usamos:
 var nome = Gustavo       // desta forma criamos uma variável e ao mesmo tempo demos uma valor a ela

nome = Gustavo             //desta forma apenas demos um valor para a variável  que ja foi criada

Regras das variáveis:
Podem começar com: Letra, $ ou _
Não podem começar com números 
É possível usar letras ou números
É possível usar  acentos e símbolos 
Não pode conter espaços 
Não pode usar palavras que são comandos

Dicas para nomes das variáveis: 
Maiúsculas e Minúsculas fazem a diferença!
Tente escolher nomes coerentes a função da variável. Ex: Variável que vai armazenar a idade, coloca o nome dela de “idade”
Evite se tornar um “Programador Alfabeto” ou um “Programador Numérico”. Ex: Não usar os nomes das variáveis como “a”, “b”, “c”, etc; ou “a1”, “a2”, “a3”, etc.

Tipos de Dados das Variáveis: (Tipos Primitivos, lembrando que existem muitas outras!)

Numbers;
Strings;
Boolean;

// Numbers: 1; -2; 4.5; 6.555 -> Basicamente números
// Strings: Maria, Google, Joao, pedreiro, (seu CPF) -> Basicamente cadeia de caracteres
// Boolean: True; False

________________________________________________________________________

Transformando uma string em um number

var n1 = Number.parseInt (window.prompt ('digite aqui um numero!'))
var numero1 = Number.parseFloat (window.prompt ('digite aqui um numero!'))
var numero1 = Number (window.prompt ('digite aqui um numero!’))

Mas qual é a diferença entra “Number.parseInt”, “Number.parseFloat” e Number?

// Number.parseInt: Numero Inteiro
// Number.parseFloat: Numero com virgula
// Number: Js vai decidir qual é

________________________________________________________________________

Transformando um number em uma string

window.alert ('a soma dos numeros é: ' + soma.toString())  // Jeito mais antigo
ou
window.alert ('a soma dos numeros é: ' + String(soma))      // Jeito mais simples
________________________________________________________________________

Formatando Strings:

var teste = 'java script’

‘eu estou aprendendo’ + teste
`eu estou aprendendo ${teste}` -> não esqueça de usar crase!
teste.length              // conta quantos caracteres tem na variável  
teste.toUpperCase        // coloca tudo em caixa alta
teste.toLowerCase       // coloca tudo em minúsculo 

________________________________________________________________________

Formatando números:

Var n1 = 1543.5

n1.toFixed(2)   // Coloca em duas casas decimais (para colocar em mais ou menos casas troque o numero entre parênteses)
n1.toLocaleString( ‘pt-BR’,{style: ‘currecy’, currency: ‘BRL’} )    // Coloca o R$ na frente do numero (pode trocar entre outras moedas)
n1.replace (‘.’, ‘,’) // Troca o ponto pela virgula

________________________________________________________________________
//Operadores de operação

Operadores aritméticos

// Módulo (%)	Operador binário. Retorna o inteiro restante da divisão dos dois operandos.	12% 5 retorna 2.

// Incremento (++)	Operador unário. Adiciona um ao seu operando. Se usado como operador prefixado ( ++x), retorna o valor de seu operando após a adição. Se usado como operador pósfixado ( x++), retorna o valor de seu operando antes da adição.	Se  xé 3, então  ++xdefina  xcomo 4 e retorna 4, enquanto  x++retorna 3 e, somente então, defina  xcomo 4.

// Decremento (--)	Operador unário. Subtrai um de seu operando. valor de aumento rápido é fazer o operador de.	Se  xé 3, então  --xdefina  xcomo 2 e retorna 2, enquanto  x--retorna 3 e, somente então, defina  xcomo 2.

// Negação (-)	Operador unário. Retorna a negação de seu operando.	
Se  xé 3, então  -xretorna -3.

// Adição (+)	Operador unário. Tenta converter o operando em um número, sempre que possível.	
+"3" retorna 3.
+true retorna 1.

// Operador de exponenciação (**)Experimental	Calcular a base superior á potência do expoente, que é, baseexpoente	
2 ** 3 retorna 8.
10 ** -1 retorna 0,1



// Atribuição	x = y	x = y
// Atribuição de adição	x += y	x = x + y
// Atribuição de subtração	x -= y	x = x - y
// Atribuição de multiplicação	x *= y	x = x * y
// Atribuição de divisão	x /= y	x = x / y
// Atribuição de resto	x %= y	x = x % y
//  exponencial	x **= y	x = x ** y
